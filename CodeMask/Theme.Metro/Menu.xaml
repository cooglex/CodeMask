<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <Geometry x:Key="Checkmark">M 0,5.1 L 1.7,5.2 L 3.4,7.1 L 8,0.4 L 9.2,0 L 3.3,10.8 Z</Geometry>
    <Geometry x:Key="RightArrow">M 0,0 L 4,3.5 L 0,7 Z</Geometry>

    <!--  Original style from http://www.jeff.wilcox.name/2010/05/zunelike-contextmenu-style/  -->
    <Style x:Key="MetroSeparator" TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{DynamicResource SeparatorColorBrush}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Margin" Value="6,2,6,2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Separator">
                    <Border Height="1"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MetroContextMenu" TargetType="{x:Type ContextMenu}">
        <Setter Property="Background" Value="{DynamicResource ControlOpenColorBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource SeparatorColorBrush}" />
        <Setter Property="Padding" Value="0,2,0,2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border x:Name="Menu"
                            Margin="2"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="0"
                            Effect="{DynamicResource StandardDropShadow}"
                            Opacity="0">
                        <Border.Triggers>
                            <EventTrigger RoutedEvent="Rectangle.Loaded">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.2"
                                                         Storyboard.TargetName="Menu"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </Border.Triggers>
                        <Grid>
                            <ItemsPresenter Margin="{TemplateBinding Padding}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--  TopLevelHeader  -->
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey}" TargetType="MenuItem">
        <Border Name="OuterBorder"
                BorderBrush="Transparent"
                BorderThickness="1,1,1,0">
            <Border Name="InnerBorder"
                    BorderBrush="Transparent"
                    BorderThickness="0,0,0,1">
                <Grid>
                    <ContentPresenter Margin="6,3,6,3"
                                      ContentSource="Header"
                                      RecognizesAccessKey="True" />
                    <Popup Name="Popup"
                           Margin="-10,-10,-10,-10"
                           AllowsTransparency="True"
                           Focusable="False"
                           HorizontalOffset="-1"
                           IsOpen="{TemplateBinding IsSubmenuOpen}"
                           Placement="Bottom"
                           PopupAnimation="Fade">
                        <Border Name="SubmenuBorder"
                                Margin="0 0 8 8"
                                Background="{DynamicResource ControlOpenColorBrush}"
                                BorderBrush="{DynamicResource SeparatorColorBrush}"
                                BorderThickness="1"
                                Effect="{DynamicResource StandardDropShadow}"
                                SnapsToDevicePixels="True">
                            <StackPanel>
                                <!--  The illusion  -->
                                <Line Stroke="{DynamicResource WhiteBrush}"
                                      X2="{Binding ActualWidth,
                                                   ElementName=InnerBorder}"
                                      Y1="-1"
                                      Y2="-1" />
                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                            </StackPanel>
                        </Border>
                    </Popup>
                </Grid>
            </Border>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource ControlHighlightedColorBrush}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="Transparent" />
            </Trigger>
            <Trigger Property="IsSubmenuOpen" Value="True">
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource ControlOpenColorBrush}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource SeparatorColorBrush}" />
            </Trigger>
            <!--
                <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="0,0,4,4"/>
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,0,0,3"/>
                </Trigger>
            -->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource MenuItemDisabled_ForegroundBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  TopLevelItem  -->
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=TopLevelItemTemplateKey}" TargetType="MenuItem">
        <Border Name="Border">
            <Grid>
                <ContentPresenter Margin="6,3,6,3"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource ControlHighlightedColorBrush}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource MenuItemDisabled_ForegroundBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  Submenu item template  -->
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuItemTemplateKey}" TargetType="MenuItem">
        <Border Name="Border" Margin="2">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"
                                      MinWidth="35"
                                      SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="Auto" MinWidth="70" />
                    <ColumnDefinition Width="Auto"
                                      MinWidth="50"
                                      SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="13" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto " MinHeight="20" />
                </Grid.RowDefinitions>
                <Border Name="CheckIcon"
                        Grid.Column="0"
                        Width="16"
                        Height="16"
                        Margin="6,0,6,0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Background="Transparent"
                        BorderBrush="Transparent"
                        BorderThickness="1"
                        Visibility="Visible">
                    <ContentPresenter Name="Icon"
                                      MaxWidth="16"
                                      MaxHeight="16"
                                      Margin="0,0,0,0"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      ContentSource="Icon" />
                </Border>
                <Border Name="Check"
                        Grid.Column="0"
                        Width="16"
                        Height="16"
                        Margin="6,0,6,0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Background="{DynamicResource WhiteColorBrush}"
                        BorderBrush="{DynamicResource SeparatorColorBrush}"
                        BorderThickness="1"
                        Visibility="Collapsed">
                    <Path Name="CheckMark"
                          Width="7"
                          Height="7"
                          Data="M 0 0 L 7 7 M 0 7 L 7 0"
                          SnapsToDevicePixels="False"
                          Stroke="{DynamicResource BlackColorBrush}"
                          StrokeThickness="2"
                          Visibility="Hidden" />
                </Border>
                <ContentPresenter Name="HeaderHost"
                                  Grid.Column="1"
                                  VerticalAlignment="Center"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True" />
                <TextBlock x:Name="InputGestureText"
                           Grid.Column="2"
                           VerticalAlignment="Center"
                           DockPanel.Dock="Right"
                           Text="{TemplateBinding InputGestureText}" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="CheckIcon" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Hidden" />
                <Setter TargetName="CheckIcon" Property="Visibility" Value="Visible" />
                <Setter TargetName="CheckIcon" Property="Background" Value="{DynamicResource WhiteColorBrush}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsCheckable" Value="true" />
                    <Condition Property="IsChecked" Value="true" />
                    <Condition Property="Icon" Value="{x:Null}" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsCheckable" Value="true" />
                    <Condition Property="Icon" Value="{x:Null}" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter TargetName="Check" Property="Visibility" Value="Visible" />
                    <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource ControlHighlightedColorBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource MenuItemDisabled_ForegroundBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  Submenu Header template  -->
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey}" TargetType="MenuItem">
        <Border Name="Border" Margin="2">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"
                                      MinWidth="35"
                                      SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="Auto" MinWidth="70" />
                    <ColumnDefinition Width="Auto"
                                      MinWidth="50"
                                      SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="13" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto " MinHeight="20" />
                </Grid.RowDefinitions>
                <Popup Name="Popup"
                       AllowsTransparency="True"
                       Focusable="False"
                       HorizontalOffset="-4"
                       IsOpen="{TemplateBinding IsSubmenuOpen}"
                       Opacity="0"
                       Placement="Right"
                       PopupAnimation="Fade">
                    <Border Name="SubmenuBorder"
                            Margin="0 0 8 8"
                            Background="{DynamicResource ControlOpenColorBrush}"
                            BorderBrush="{DynamicResource SeparatorColorBrush}"
                            BorderThickness="1"
                            Effect="{DynamicResource StandardDropShadow}"
                            SnapsToDevicePixels="True">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
                <ContentPresenter Name="Icon"
                                  Grid.Column="0"
                                  MaxWidth="16"
                                  MaxHeight="16"
                                  Margin="0,0,0,0"
                                  VerticalAlignment="Center"
                                  ContentSource="Icon" />
                <ContentPresenter Name="HeaderHost"
                                  Grid.Column="1"
                                  VerticalAlignment="Center"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True" />
                <TextBlock x:Name="InputGestureText"
                           Grid.Column="2"
                           DockPanel.Dock="Right"
                           Text="{TemplateBinding InputGestureText}" />
                <Path x:Name="ArrowPath"
                      Grid.Column="3"
                      HorizontalAlignment="Left"
                      VerticalAlignment="Center"
                      Data="{StaticResource RightArrow}"
                      Fill="{TemplateBinding Foreground}" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource ControlHighlightedColorBrush}" />
                <Setter TargetName="ArrowPath" Property="Fill" Value="{DynamicResource AccentColorBrush}" />
            </Trigger>
            <!--
                <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="4"/>
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,3,0,3"/>
                </Trigger>
            -->
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource MenuItemDisabled_ForegroundBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  MenuItem Style  -->
    <Style x:Key="MetroMenuItem" TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Background" Value="{DynamicResource ControlOpenColorBrush}" />
        <Setter Property="FontFamily" Value="{DynamicResource ContentFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource ContentFontSize}" />
        <Setter Property="Foreground" Value="{DynamicResource BlackBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ControlOpenColorBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="8,2,10,2" />
        <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey}}" />
        <Style.Resources>
            <!--  Disabled all images placed inside a button - most common scenario  -->
            <Style TargetType="Image">
                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" Value="0.5" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="Path">
                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" Value="0.5" />
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Padding" Value="7,2,8,3" />
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Padding" Value="7,2,8,3" />
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Padding" Value="2,3,2,3" />
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Padding" Value="2,3,2,3" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="StandardMenu" TargetType="Menu">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Menu">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="1">
                        <StackPanel ClipToBounds="True"
                                    IsItemsHost="True"
                                    Orientation="Horizontal" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Set default styles  -->
    <Style BasedOn="{StaticResource MetroSeparator}" TargetType="Separator" />
    <Style BasedOn="{StaticResource MetroMenuItem}" TargetType="MenuItem" />
    <Style BasedOn="{StaticResource StandardMenu}" TargetType="Menu" />
    <Style BasedOn="{StaticResource MetroContextMenu}" TargetType="ContextMenu" />
</ResourceDictionary>