<!--
    ***********************************************************************************
    
    AvalonDock
    
    
    
    
 
    
    
    
    
    
    
    **********************************************************************************
-->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:avalonDock="clr-namespace:CodeMask.WPF.AvalonDock;assembly=CodeMask.WPF.AvalonDock"
                    xmlns:avalonDockControls="clr-namespace:CodeMask.WPF.AvalonDock.Controls;assembly=CodeMask.WPF.AvalonDock"
                    xmlns:avalonDockConverters="clr-namespace:CodeMask.WPF.AvalonDock.Converters;assembly=CodeMask.WPF.AvalonDock"
                    xmlns:avalonDockLayout="clr-namespace:CodeMask.WPF.AvalonDock.Layout;assembly=CodeMask.WPF.AvalonDock"
                    xmlns:avalonDockProperties="clr-namespace:CodeMask.WPF.AvalonDock.Properties;assembly=CodeMask.WPF.AvalonDock"
                    xmlns:localControls="clr-namespace:CodeMask.WPF.AvalonDock.Themes.Controls"
                    xmlns:localThemes="clr-namespace:CodeMask.WPF.AvalonDock.Themes"
                    xmlns:shell="clr-namespace:Microsoft.Windows.Shell;assembly=CodeMask.WPF.AvalonDock"
                    xmlns:sys="clr-namespace:System.Windows;assembly=PresentationCore">

    <avalonDockConverters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
    <avalonDockConverters:InverseBoolToVisibilityConverter x:Key="InverseBoolToVisibilityConverter" />
    <avalonDockConverters:AnchorSideToOrientationConverter x:Key="AnchorSideToOrientationConverter" />
    <avalonDockConverters:AnchorSideToAngleConverter x:Key="AnchorSideToAngleConverter" />
    <avalonDockConverters:NullToDoNothingConverter x:Key="NullToDoNothingConverter" />
    <avalonDockConverters:LayoutItemFromLayoutModelConverter x:Key="LayoutItemFromLayoutModelConverter" />
    <avalonDockConverters:ActivateCommandLayoutItemFromLayoutModelConverter
        x:Key="ActivateCommandLayoutItemFromLayoutModelConverter" />
    <avalonDockConverters:HideCommandLayoutItemFromLayoutModelConverter
        x:Key="HideCommandLayoutItemFromLayoutModelConverter" />
    <avalonDockConverters:AutoHideCommandLayoutItemFromLayoutModelConverter
        x:Key="AutoHideCommandLayoutItemFromLayoutModelConverter" />

    <Style x:Key="AvalonDock_Expression_ToolButtonStyle" TargetType="ToggleButton">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>


    </Style>

    <Style x:Key="AvalonDock_Expression_ButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  DocumentPaneControlStyle  -->
    <Style x:Key="AvalonDock_Expression_DocumentPaneControlStyle"
           TargetType="{x:Type avalonDockControls:LayoutDocumentPaneControl}">
        <Setter Property="Background" Value="{DynamicResource AvalonDock_Expression_BaseColor8}" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentPaneControl}">
                    <Grid ClipToBounds="true"
                          KeyboardNavigation.TabNavigation="Local"
                          SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <!--  Following border is required to catch mouse events  -->
                        <Border Grid.RowSpan="2" Background="Transparent" />
                        <Grid Panel.ZIndex="1">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <avalonDockControls:DropDownButton x:Name="MenuDropDownButton"
                                                               Grid.Column="1"
                                                               VerticalAlignment="Center"
                                                               Focusable="False"
                                                               Style="{StaticResource AvalonDock_Expression_ToolButtonStyle}">
                                <avalonDockControls:DropDownButton.DropDownContextMenu>
                                    <avalonDockControls:ContextMenuEx
                                        ItemsSource="{Binding Model.ChildrenSorted, RelativeSource={RelativeSource TemplatedParent}}">
                                        <avalonDockControls:ContextMenuEx.ItemContainerStyle>
                                            <Style BasedOn="{StaticResource {x:Type MenuItem}}"
                                                   TargetType="{x:Type avalonDockControls:MenuItemEx}">
                                                <Setter Property="HeaderTemplate"
                                                        Value="{Binding Path=Root.Manager.DocumentPaneMenuItemHeaderTemplate}" />
                                                <Setter Property="HeaderTemplateSelector"
                                                        Value="{Binding Path=Root.Manager.DocumentPaneMenuItemHeaderTemplateSelector}" />
                                                <Setter Property="IconTemplate"
                                                        Value="{Binding Path=Root.Manager.IconContentTemplate}" />
                                                <Setter Property="IconTemplateSelector"
                                                        Value="{Binding Path=Root.Manager.IconContentTemplateSelector}" />
                                                <Setter Property="Command"
                                                        Value="{Binding Path=., Converter={StaticResource ActivateCommandLayoutItemFromLayoutModelConverter}}" />
                                            </Style>
                                        </avalonDockControls:ContextMenuEx.ItemContainerStyle>
                                    </avalonDockControls:ContextMenuEx>
                                </avalonDockControls:DropDownButton.DropDownContextMenu>
                                <Image Source="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinMenu.png" />
                            </avalonDockControls:DropDownButton>
                            <avalonDockControls:DocumentPaneTabPanel x:Name="HeaderPanel"
                                                                     Grid.Row="0"
                                                                     Grid.Column="0"
                                                                     Margin="2,0,2,0"
                                                                     IsItemsHost="true"
                                                                     KeyboardNavigation.TabIndex="1" />
                        </Grid>
                        <Border x:Name="ContentPanel"
                                Grid.Row="1"
                                Grid.Column="0"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="3"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                KeyboardNavigation.TabIndex="2"
                                KeyboardNavigation.TabNavigation="Cycle"
                                Padding="0,1,0,2">
                            <ContentPresenter x:Name="PART_SelectedContentHost"
                                              Margin="0,2,0,2"
                                              ContentSource="SelectedContent"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="MenuDropDownButton" Property="IsMouseOver" Value="True">
                            <Setter TargetName="MenuDropDownButton" Property="Content">
                                <Setter.Value>
                                    <Image
                                        Source="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinMenu_Light.png" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger SourceName="MenuDropDownButton" Property="IsChecked" Value="True">
                            <Setter TargetName="MenuDropDownButton" Property="Content">
                                <Setter.Value>
                                    <Image
                                        Source="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinMenu_Light.png" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type TabItem}">
                    <Setter Property="Background" Value="{DynamicResource AvalonDock_Expression_BaseColor4}" />
                    <Setter Property="Foreground" Value="{DynamicResource AvalonDock_Expression_BaseColor2}" />
                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                    <Setter Property="ToolTip" Value="{Binding ToolTip}" />
                    <Setter Property="Padding" Value="2,0,2,0" />
                    <Setter Property="Margin" Value="2,0,2,0" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type TabItem}">
                                <Grid SnapsToDevicePixels="true">
                                    <Border x:Name="Bd"
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            CornerRadius="2,2,0,0"
                                            Padding="{TemplateBinding Padding}">
                                        <ContentPresenter x:Name="Content"
                                                          HorizontalAlignment="{Binding HorizontalContentAlignment,
                                                                                        RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                                          VerticalAlignment="{Binding VerticalContentAlignment,
                                                                                      RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                                          ContentSource="Header"
                                                          RecognizesAccessKey="True"
                                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Border>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="Selector.IsSelected" Value="true">
                                        <Setter Property="Background"
                                                Value="{DynamicResource AvalonDock_Expression_BaseColor10}" />
                                        <Setter Property="Margin" Value="-1,0,-1,-4" />
                                        <Setter TargetName="Content" Property="Margin" Value="0,0,0,3" />
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="BorderBrush"
                                                Value="{DynamicResource AvalonDock_Expression_BaseColor13}" />
                                        <Setter Property="Background"
                                                Value="{DynamicResource AvalonDock_Expression_BaseColor9}" />
                                        <Setter Property="Foreground"
                                                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <avalonDockControls:LayoutDocumentTabItem Model="{Binding}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <avalonDockControls:LayoutDocumentControl Model="{Binding}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  AnchorablePaneControlStyle  -->
    <Style x:Key="AvalonDock_Expression_AnchorablePaneControlStyle"
           TargetType="{x:Type avalonDockControls:LayoutAnchorablePaneControl}">
        <Setter Property="TabStripPlacement" Value="Bottom" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground"
                Value="{Binding Model.Root.Manager.Foreground, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Background" Value="{DynamicResource AvalonDock_Expression_BaseColor8}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorablePaneControl}">
                    <Grid ClipToBounds="true"
                          KeyboardNavigation.TabNavigation="Local"
                          SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <!--  Following border is required to catch mouse events  -->
                        <Border Grid.RowSpan="2" Background="Transparent" />

                        <Border x:Name="Header">
                            <avalonDockControls:AnchorablePaneTitle
                                Model="{Binding Model.SelectedContent, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Border>

                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="48" />
                            </Grid.ColumnDefinitions>
                            <avalonDockControls:AnchorablePaneTabPanel x:Name="HeaderPanel"
                                                                       Margin="0,2,0,0"
                                                                       Panel.ZIndex="1"
                                                                       IsItemsHost="true"
                                                                       KeyboardNavigation.TabIndex="1" />
                        </Grid>

                        <Border x:Name="ContentPanel"
                                Grid.Row="1"
                                Grid.Column="0"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                KeyboardNavigation.TabIndex="2"
                                KeyboardNavigation.TabNavigation="Cycle"
                                Padding="1">
                            <ContentPresenter x:Name="PART_SelectedContentHost"
                                              Margin="{TemplateBinding Padding}"
                                              ContentSource="SelectedContent"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition
                                    Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.IsFloating}"
                                    Value="True" />
                                <Condition
                                    Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.Parent.IsDirectlyHostedInFloatingWindow}"
                                    Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Header" Property="Visibility" Value="Collapsed" />
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type TabItem}">
                    <Setter Property="Background" Value="{DynamicResource AvalonDock_Expression_BaseColor4}" />
                    <Setter Property="Foreground" Value="{DynamicResource AvalonDock_Expression_BaseColor2}" />
                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                    <Setter Property="ToolTip" Value="{Binding ToolTip}" />
                    <Setter Property="Margin" Value="0,0,-10,0" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type TabItem}">
                                <Grid SnapsToDevicePixels="true">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="22" />
                                    </Grid.ColumnDefinitions>
                                    <Border x:Name="Bd"
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            CornerRadius="3,0,0,0"
                                            Padding="{TemplateBinding Padding}">
                                        <ContentPresenter x:Name="Content"
                                                          HorizontalAlignment="{Binding HorizontalContentAlignment,
                                                                                        RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                                          VerticalAlignment="{Binding VerticalContentAlignment,
                                                                                      RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                                          ContentSource="Header"
                                                          RecognizesAccessKey="True"
                                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Border>

                                    <localControls:SplineBorder Grid.Column="1"
                                                                Fill="{TemplateBinding Background}"
                                                                Stroke="{TemplateBinding Background}" />
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="Selector.IsSelected" Value="true">
                                        <Setter Property="Background"
                                                Value="{DynamicResource AvalonDock_Expression_BaseColor10}" />
                                        <Setter Property="Panel.ZIndex" Value="1" />
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Foreground"
                                                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                    </Trigger>
                                    <DataTrigger
                                        Binding="{Binding Items.Count, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl}}"
                                        Value="1">
                                        <Setter Property="IsHitTestVisible" Value="False" />
                                    </DataTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>

        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <avalonDockControls:LayoutAnchorableTabItem Model="{Binding}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <avalonDockControls:LayoutAnchorableControl Model="{Binding}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="avalonDockControls:AnchorablePaneTitle">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2,2,0,0"
                            Padding="0,4,0,4">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <avalonDockControls:DropDownButton x:Name="MenuDropDownButton"
                                                               Grid.Column="1"
                                                               VerticalAlignment="Center"
                                                               DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu,
                                                                                             RelativeSource={RelativeSource TemplatedParent}}"
                                                               DropDownContextMenuDataContext="{Binding Path=LayoutItem,
                                                                                                        RelativeSource={RelativeSource TemplatedParent}}"
                                                               Focusable="False"
                                                               Style="{StaticResource AvalonDock_Expression_ToolButtonStyle}"
                                                               ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_CxMenu_Hint}">
                                <Image x:Name="PART_ImgMenuPin"
                                       Source="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinMenu.png" />
                            </avalonDockControls:DropDownButton>

                            <Button x:Name="PART_AutoHidePin"
                                    Grid.Column="2"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Command="{Binding Path=LayoutItem.AutoHideCommand,
                                                      RelativeSource={RelativeSource TemplatedParent}}"
                                    Focusable="False"
                                    Style="{StaticResource AvalonDock_Expression_ButtonStyle}"
                                    ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnAutoHide_Hint}"
                                    Visibility="{Binding Path=IsEnabled,
                                                         RelativeSource={RelativeSource Self},
                                                         Mode=OneWay,
                                                         Converter={StaticResource BoolToVisibilityConverter},
                                                         ConverterParameter=Visibility.Hidden}">
                                <Image x:Name="PART_ImgAutoHidePin"
                                       Source="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinAutoHide.png" />
                            </Button>

                            <Button x:Name="PART_HidePin"
                                    Grid.Column="3"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Command="{Binding Path=LayoutItem.HideCommand,
                                                      RelativeSource={RelativeSource TemplatedParent}}"
                                    Focusable="False"
                                    Style="{StaticResource AvalonDock_Expression_ButtonStyle}"
                                    ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnClose_Hint}"
                                    Visibility="{Binding Path=IsEnabled,
                                                         RelativeSource={RelativeSource Self},
                                                         Mode=OneWay,
                                                         Converter={StaticResource BoolToVisibilityConverter}}">
                                <Image x:Name="PART_ImgHidePin"
                                       Source="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinClose.png" />
                            </Button>

                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource AvalonDock_Expression_BaseColor5}" />
                        </Trigger>
                        <DataTrigger Binding="{Binding Model.IsAutoHidden, RelativeSource={RelativeSource Mode=Self}}"
                                     Value="True">
                            <Setter TargetName="PART_AutoHidePin" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90" />
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <Trigger SourceName="MenuDropDownButton" Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_ImgMenuPin" Property="Source"
                                    Value="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinMenu_Light.png" />
                        </Trigger>
                        <Trigger SourceName="MenuDropDownButton" Property="IsChecked" Value="True">
                            <Setter TargetName="PART_ImgMenuPin" Property="Source"
                                    Value="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinMenu_Light.png" />
                        </Trigger>
                        <Trigger SourceName="PART_AutoHidePin" Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_ImgAutoHidePin" Property="Source"
                                    Value="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinAutoHide_Light.png" />
                        </Trigger>
                        <Trigger SourceName="PART_HidePin" Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_ImgHidePin" Property="Source"
                                    Value="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinClose_Light.png" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="AvalonDock_Expression_AnchorSideTemplate"
                     TargetType="{x:Type avalonDockControls:LayoutAnchorSideControl}">
        <ItemsControl ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Children}">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <StackPanel MinWidth="4"
                                MinHeight="4"
                                Orientation="{Binding Path=Model.Side,
                                                      RelativeSource={RelativeSource AncestorType={x:Type avalonDockControls:LayoutAnchorSideControl},
                                                                                     Mode=FindAncestor},
                                                      Converter={StaticResource AnchorSideToOrientationConverter}}" />
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
        </ItemsControl>
    </ControlTemplate>

    <ControlTemplate x:Key="AvalonDock_Expression_AnchorGroupTemplate"
                     TargetType="{x:Type avalonDockControls:LayoutAnchorGroupControl}">
        <ItemsControl ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Children}">
            <ItemsControl.LayoutTransform>
                <RotateTransform
                    Angle="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Model.Parent.Side, Converter={StaticResource AnchorSideToAngleConverter}}" />
            </ItemsControl.LayoutTransform>
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
        </ItemsControl>
    </ControlTemplate>

    <ControlTemplate x:Key="AvalonDock_Expression_AnchorTemplate"
                     TargetType="{x:Type avalonDockControls:LayoutAnchorControl}">
        <Border x:Name="Bd"
                Margin="0,4,2,0"
                Background="{DynamicResource AvalonDock_Expression_BaseColor4}"
                CornerRadius="3,3,0,0"
                Padding="2">
            <ContentPresenter
                Content="{Binding Model,
                                                RelativeSource={RelativeSource TemplatedParent}}"
                ContentTemplate="{Binding AnchorableHeaderTemplate,
                                                        Mode=OneWay,
                                                        RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager},
                                                                                       Mode=FindAncestor}}"
                ContentTemplateSelector="{Binding AnchorableHeaderTemplateSelector,
                                                                Mode=OneWay,
                                                                RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager},
                                                                                               Mode=FindAncestor}}"
                TextElement.Foreground="{DynamicResource AvalonDock_Expression_BaseColor2}" />
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Side" Value="Right">
                <Setter TargetName="Bd" Property="CornerRadius" Value="0,0,3,3" />
                <Setter TargetName="Bd" Property="Margin" Value="0,0,2,4" />
            </Trigger>
            <Trigger Property="Side" Value="Bottom">
                <Setter TargetName="Bd" Property="CornerRadius" Value="3,3,0,0" />
                <Setter TargetName="Bd" Property="Margin" Value="2,4,0,0" />
            </Trigger>
            <Trigger Property="Side" Value="Top">
                <Setter TargetName="Bd" Property="CornerRadius" Value="0,0,3,3" />
                <Setter TargetName="Bd" Property="Margin" Value="0,0,2,4" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="true" />
                    <Condition Property="Selector.IsSelected" Value="false" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Bd" Property="Background"
                        Value="{DynamicResource AvalonDock_Expression_BaseColor10}" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Type avalonDockControls:OverlayWindow}" TargetType="{x:Type avalonDockControls:OverlayWindow}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:OverlayWindow}">
                    <Canvas x:Name="PART_DropTargetsContainer" Opacity="0.9">
                        <Path x:Name="PART_PreviewBox"
                              Fill="AliceBlue"
                              Stroke="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                              StrokeThickness="2" />
                        <Grid x:Name="PART_DockingManagerDropTargets">
                            <Border x:Name="PART_DockingManagerDropTargetLeft"
                                    Width="10"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Stretch" />
                            <Border x:Name="PART_DockingManagerDropTargetRight"
                                    Width="10"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Stretch" />
                            <Border x:Name="PART_DockingManagerDropTargetBottom"
                                    Height="10"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Bottom" />
                            <Border x:Name="PART_DockingManagerDropTargetTop"
                                    Height="10"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Top" />
                        </Grid>
                        <Grid x:Name="PART_AnchorablePaneDropTargets">
                            <Border x:Name="PART_AnchorablePaneDropTargetLeft"
                                    Width="10"
                                    Margin="10,0,0,0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Stretch" />
                            <Border x:Name="PART_AnchorablePaneDropTargetRight"
                                    Width="10"
                                    Margin="0,0,10,0"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Stretch" />
                            <Border x:Name="PART_AnchorablePaneDropTargetBottom"
                                    Height="10"
                                    Margin="0,10,0,0"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Bottom" />
                            <Border x:Name="PART_AnchorablePaneDropTargetTop"
                                    Height="10"
                                    Margin="0,0,0,10"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Top" />
                            <Border x:Name="PART_AnchorablePaneDropTargetInto"
                                    Width="0"
                                    Height="0"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center" />
                        </Grid>
                        <Grid x:Name="PART_DocumentPaneDropTargets">
                            <Border x:Name="PART_DocumentPaneDropTargetLeft"
                                    Width="10"
                                    Margin="10,0,0,0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Stretch" />
                            <Border x:Name="PART_DocumentPaneDropTargetRight"
                                    Width="10"
                                    Margin="0,0,10,0"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Stretch" />
                            <Border x:Name="PART_DocumentPaneDropTargetBottom"
                                    Height="10"
                                    Margin="0,10,0,0"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Bottom" />
                            <Border x:Name="PART_DocumentPaneDropTargetTop"
                                    Height="10"
                                    Margin="0,0,0,10"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Top" />
                            <Border x:Name="PART_DocumentPaneDropTargetInto"
                                    Width="0"
                                    Height="0"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center" />
                        </Grid>

                        <Grid x:Name="PART_DocumentPaneFullDropTargets">
                            <Border x:Name="PART_DocumentPaneFullDropTargetLeft"
                                    Width="10"
                                    Margin="15,0,0,0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Stretch" />
                            <Border x:Name="PART_DocumentPaneFullDropTargetRight"
                                    Width="10"
                                    Margin="0,0,15,0"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Stretch" />
                            <Border x:Name="PART_DocumentPaneFullDropTargetBottom"
                                    Height="10"
                                    Margin="0,15,0,0"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Bottom" />
                            <Border x:Name="PART_DocumentPaneFullDropTargetTop"
                                    Height="10"
                                    Margin="0,0,0,15"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Top" />
                            <Border x:Name="PART_DocumentPaneFullDropTargetInto"
                                    Width="0"
                                    Height="0"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center" />

                            <Border x:Name="PART_DocumentPaneDropTargetLeftAsAnchorablePane"
                                    Width="15"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Stretch" />
                            <Border x:Name="PART_DocumentPaneDropTargetRightAsAnchorablePane"
                                    Width="15"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Stretch" />
                            <Border x:Name="PART_DocumentPaneDropTargetBottomAsAnchorablePane"
                                    Height="15"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Bottom" />
                            <Border x:Name="PART_DocumentPaneDropTargetTopAsAnchorablePane"
                                    Height="15"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Top" />

                        </Grid>

                    </Canvas>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="AvalonDock_Expression_DocumentHeaderTemplate">
        <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis" />
    </DataTemplate>

    <DataTemplate x:Key="AvalonDock_Expression_AnchorableHeaderTemplate">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <Image x:Name="icon"
                   Source="{Binding IconSource,
                                    Converter={StaticResource NullToDoNothingConverter}}"
                   Stretch="Uniform" />
            <TextBlock x:Name="title"
                       Grid.Column="1"
                       Margin="4,0,0,0"
                       Text="{Binding Title}"
                       TextTrimming="CharacterEllipsis" />
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IconSource}" Value="{x:Null}">
                <Setter TargetName="title" Property="Margin" Value="0" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="AvalonDock_Expression_DocumentTitleTemplate">
        <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis" />
    </DataTemplate>

    <DataTemplate x:Key="AvalonDock_Expression_AnchorableTitleTemplate">
        <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis" />
    </DataTemplate>

    <DataTemplate x:Key="AvalonDock_Expression_IconContentTemplate">
        <Image Source="{Binding IconSource, Converter={StaticResource NullToDoNothingConverter}}" Stretch="Uniform" />
    </DataTemplate>

    <ContextMenu x:Key="AvalonDock_Expression_AnchorableContextMenu">
        <MenuItem Command="{Binding Path=FloatCommand}"
                  Header="{x:Static avalonDockProperties:Resources.Anchorable_Float}" />
        <MenuItem Command="{Binding Path=DockCommand}"
                  Header="{x:Static avalonDockProperties:Resources.Anchorable_Dock}" />
        <MenuItem Command="{Binding Path=DockAsDocumentCommand}"
                  Header="{x:Static avalonDockProperties:Resources.Anchorable_DockAsDocument}" />
        <MenuItem Command="{Binding Path=AutoHideCommand}"
                  Header="{x:Static avalonDockProperties:Resources.Anchorable_AutoHide}" />
        <MenuItem Command="{Binding Path=CloseCommand}"
                  Header="{x:Static avalonDockProperties:Resources.Anchorable_Hide}"
                  Visibility="{Binding Path=IsEnabled,
                                       RelativeSource={RelativeSource Self},
                                       Mode=OneWay,
                                       Converter={StaticResource BoolToVisibilityConverter}}" />
    </ContextMenu>

    <ContextMenu x:Key="AvalonDock_Expression_DocumentContextMenu">
        <MenuItem Command="{Binding Path=CloseCommand}"
                  Header="{x:Static avalonDockProperties:Resources.Document_Close}"
                  Visibility="{Binding Path=IsEnabled,
                                       RelativeSource={RelativeSource Self},
                                       Mode=OneWay,
                                       Converter={StaticResource BoolToVisibilityConverter}}" />
        <MenuItem Command="{Binding Path=CloseAllButThisCommand}"
                  Header="{x:Static avalonDockProperties:Resources.Document_CloseAllButThis}" />
        <MenuItem Command="{Binding Path=FloatCommand}"
                  Header="{x:Static avalonDockProperties:Resources.Document_Float}" />
        <MenuItem Command="{Binding Path=DockAsDocumentCommand}"
                  Header="{x:Static avalonDockProperties:Resources.Document_DockAsDocument}" />
        <MenuItem Command="{Binding Path=NewHorizontalTabGroupCommand}"
                  Header="{x:Static avalonDockProperties:Resources.Document_NewHorizontalTabGroup}"
                  Visibility="{Binding Path=IsEnabled,
                                       RelativeSource={RelativeSource Self},
                                       Mode=OneWay,
                                       Converter={StaticResource BoolToVisibilityConverter}}">
            <MenuItem.Icon>
                <Image Width="14"
                       Source="/CodeMask.WPF.AvalonDock;component/Themes/Aero/Images/HTabGroup.png"
                       Stretch="Uniform" />
            </MenuItem.Icon>
        </MenuItem>

        <MenuItem Command="{Binding Path=NewVerticalTabGroupCommand}"
                  Header="{x:Static avalonDockProperties:Resources.Document_NewVerticalTabGroup}"
                  Visibility="{Binding Path=IsEnabled,
                                       RelativeSource={RelativeSource Self},
                                       Mode=OneWay,
                                       Converter={StaticResource BoolToVisibilityConverter}}">
            <MenuItem.Icon>
                <Image Width="14"
                       Source="/CodeMask.WPF.AvalonDock;component/Themes/Aero/Images/VTabGroup.png"
                       Stretch="Uniform" />
            </MenuItem.Icon>
        </MenuItem>
        <MenuItem Command="{Binding Path=MoveToNextTabGroupCommand}"
                  Header="{x:Static avalonDockProperties:Resources.Document_MoveToNextTabGroup}"
                  Visibility="{Binding Path=IsEnabled,
                                       RelativeSource={RelativeSource Self},
                                       Mode=OneWay,
                                       Converter={StaticResource BoolToVisibilityConverter}}" />
        <MenuItem Command="{Binding Path=MoveToPreviousTabGroupCommand}"
                  Header="{x:Static avalonDockProperties:Resources.Document_MoveToPreviousTabGroup}"
                  Visibility="{Binding Path=IsEnabled,
                                       RelativeSource={RelativeSource Self},
                                       Mode=OneWay,
                                       Converter={StaticResource BoolToVisibilityConverter}}" />
    </ContextMenu>

    <!--  DockingManager  -->
    <Style x:Key="{x:Type avalonDock:DockingManager}" TargetType="{x:Type avalonDock:DockingManager}">
        <Setter Property="Background" Value="{DynamicResource AvalonDock_Expression_BaseColor1}" />
        <Setter Property="DocumentPaneControlStyle"
                Value="{StaticResource AvalonDock_Expression_DocumentPaneControlStyle}" />
        <Setter Property="AnchorablePaneControlStyle"
                Value="{StaticResource AvalonDock_Expression_AnchorablePaneControlStyle}" />
        <Setter Property="AnchorSideTemplate" Value="{StaticResource AvalonDock_Expression_AnchorSideTemplate}" />
        <Setter Property="AnchorGroupTemplate" Value="{StaticResource AvalonDock_Expression_AnchorGroupTemplate}" />
        <Setter Property="AnchorTemplate" Value="{StaticResource AvalonDock_Expression_AnchorTemplate}" />
        <Setter Property="DocumentHeaderTemplate" Value="{StaticResource AvalonDock_Expression_DocumentHeaderTemplate}" />
        <Setter Property="AnchorableHeaderTemplate"
                Value="{StaticResource AvalonDock_Expression_AnchorableHeaderTemplate}" />
        <Setter Property="DocumentTitleTemplate" Value="{StaticResource AvalonDock_Expression_DocumentTitleTemplate}" />
        <Setter Property="AnchorableTitleTemplate"
                Value="{StaticResource AvalonDock_Expression_AnchorableTitleTemplate}" />
        <Setter Property="AnchorableContextMenu" Value="{StaticResource AvalonDock_Expression_AnchorableContextMenu}" />
        <Setter Property="DocumentContextMenu" Value="{StaticResource AvalonDock_Expression_DocumentContextMenu}" />
        <Setter Property="DocumentPaneMenuItemHeaderTemplate"
                Value="{StaticResource AvalonDock_Expression_DocumentHeaderTemplate}" />
        <Setter Property="IconContentTemplate" Value="{StaticResource AvalonDock_Expression_IconContentTemplate}" />
        <Setter Property="GridSplitterWidth" Value="4" />
        <Setter Property="GridSplitterHeight" Value="4" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDock:DockingManager}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ContentPresenter Grid.Row="0"
                                              Grid.Column="1"
                                              Content="{TemplateBinding TopSidePanel}" />
                            <ContentPresenter Grid.Row="1"
                                              Grid.Column="0"
                                              Content="{TemplateBinding LeftSidePanel}" />
                            <ContentPresenter Grid.Row="1"
                                              Grid.Column="1"
                                              Content="{TemplateBinding LayoutRootPanel}" />
                            <ContentPresenter x:Name="PART_AutoHideArea"
                                              Grid.Row="1"
                                              Grid.Column="1"
                                              HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                              Content="{TemplateBinding AutoHideWindow}" />
                            <ContentPresenter Grid.Row="1"
                                              Grid.Column="2"
                                              Content="{TemplateBinding RightSidePanel}" />
                            <ContentPresenter Grid.Row="2"
                                              Grid.Column="1"
                                              Content="{TemplateBinding BottomSidePanel}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  LayoutGridResizerControl  -->
    <Style x:Key="{x:Type avalonDockControls:LayoutGridResizerControl}"
           TargetType="{x:Type avalonDockControls:LayoutGridResizerControl}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutGridResizerControl}">
                    <Border Background="{TemplateBinding Background}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type avalonDockControls:LayoutDocumentControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentControl}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter
                            Content="{Binding LayoutItem.View, RelativeSource={RelativeSource TemplatedParent}}" />
                        <!--<ContentPresenter Content="{Binding Model.Content, RelativeSource={RelativeSource TemplatedParent}}"
                                          ContentTemplate="{Binding LayoutItemTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                          ContentTemplateSelector="{Binding LayoutItemTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"/>-->
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type avalonDockControls:LayoutDocumentTabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentTabItem}">
                    <avalonDockControls:DropDownControlArea
                        DropDownContextMenu="{Binding Root.Manager.DocumentContextMenu}"
                        DropDownContextMenuDataContext="{Binding LayoutItem, RelativeSource={RelativeSource TemplatedParent}}">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="0,2,0,1">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Border Grid.ColumnSpan="2" Background="Transparent" />
                                <ContentPresenter
                                    Content="{Binding Model,
                                                                    RelativeSource={RelativeSource TemplatedParent}}"
                                    ContentTemplate="{Binding DocumentHeaderTemplate,
                                                                            Mode=OneWay,
                                                                            RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager},
                                                                                                           Mode=FindAncestor}}"
                                    ContentTemplateSelector="{Binding DocumentHeaderTemplateSelector,
                                                                                    Mode=OneWay,
                                                                                    RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager},
                                                                                                                   Mode=FindAncestor}}" />
                                <!--  Close button should be moved out to the container style  -->
                                <Button x:Name="DocumentCloseButton"
                                        Grid.Column="1"
                                        Margin="5,0,0,0"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Command="{Binding Path=LayoutItem.CloseCommand,
                                                          RelativeSource={RelativeSource TemplatedParent}}"
                                        Style="{StaticResource AvalonDock_Expression_ButtonStyle}"
                                        ToolTip="{x:Static avalonDockProperties:Resources.Document_Close}"
                                        Visibility="Hidden">
                                    <Image x:Name="PART_ImgPinClose"
                                           Source="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinClose.png" />
                                </Button>
                            </Grid>
                        </Border>
                    </avalonDockControls:DropDownControlArea>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=IsSelected}" Value="true">
                            <Setter TargetName="DocumentCloseButton" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="DocumentCloseButton" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=CanClose}" Value="false">
                            <Setter TargetName="DocumentCloseButton" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                        <Trigger SourceName="DocumentCloseButton" Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_ImgPinClose" Property="Source"
                                    Value="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinClose_Light.png" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type avalonDockControls:LayoutAnchorableTabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableTabItem}">
                    <avalonDockControls:DropDownControlArea
                        DropDownContextMenu="{Binding Root.Manager.AnchorableContextMenu}"
                        DropDownContextMenuDataContext="{Binding LayoutItem, RelativeSource={RelativeSource TemplatedParent}}">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>

                                <ContentPresenter
                                    Content="{Binding Model,
                                                                    RelativeSource={RelativeSource TemplatedParent}}"
                                    ContentTemplate="{Binding AnchorableHeaderTemplate,
                                                                            Mode=OneWay,
                                                                            RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager},
                                                                                                           Mode=FindAncestor}}"
                                    ContentTemplateSelector="{Binding AnchorableHeaderTemplateSelector,
                                                                                    Mode=OneWay,
                                                                                    RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager},
                                                                                                                   Mode=FindAncestor}}" />
                                <avalonDockControls:DropDownControlArea
                                    DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                    DropDownContextMenuDataContext="{Binding Path=Model, RelativeSource={RelativeSource TemplatedParent}}" />

                                <Button x:Name="PART_HidePin"
                                        Grid.Column="1"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Command="{Binding Path=LayoutItem.HideCommand,
                                                          RelativeSource={RelativeSource TemplatedParent}}"
                                        Focusable="False"
                                        Style="{StaticResource AvalonDock_Expression_ButtonStyle}"
                                        ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnClose_Hint}"
                                        Visibility="{Binding Path=IsEnabled,
                                                             RelativeSource={RelativeSource Self},
                                                             Mode=OneWay,
                                                             Converter={StaticResource BoolToVisibilityConverter}}">
                                    <Image x:Name="PART_ImgHidePin"
                                           Source="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinClose.png" />
                                </Button>

                            </Grid>
                        </Border>
                    </avalonDockControls:DropDownControlArea>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Model.IsSelected}" Value="False">
                            <Setter TargetName="PART_HidePin" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                        <DataTrigger
                            Binding="{Binding Items.Count, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl}}"
                            Value="1">
                            <Setter TargetName="PART_HidePin" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                        <Trigger SourceName="PART_HidePin" Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_ImgHidePin" Property="Source"
                                    Value="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinClose_Light.png" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type avalonDockControls:LayoutAnchorableControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableControl}">
                    <Border x:Name="Bd"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <!--<ContentPresenter
                                Content="{Binding Model.Content, RelativeSource={RelativeSource TemplatedParent}}"
                                ContentTemplate="{Binding LayoutItemTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                ContentTemplateSelector="{Binding LayoutItemTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                />-->
                            <ContentPresenter Grid.Row="1"
                                              Content="{Binding LayoutItem.View,
                                                                RelativeSource={RelativeSource TemplatedParent}}"
                                              FlowDirection="{TemplateBinding FlowDirection}" />

                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type avalonDockControls:LayoutDocumentFloatingWindowControl}"
           TargetType="{x:Type avalonDockControls:LayoutDocumentFloatingWindowControl}">
        <Setter Property="Foreground" Value="{DynamicResource AvalonDock_Expression_BaseColor2}" />
        <Setter Property="Background" Value="{DynamicResource AvalonDock_Expression_BaseColor4}" />
        <Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_Expression_BaseColor10}" />
        <Setter Property="shell:WindowChrome.WindowChrome">
            <Setter.Value>
                <shell:WindowChrome CaptionHeight="18"
                                    CornerRadius="0"
                                    GlassFrameThickness="0"
                                    ResizeBorderThickness="10"
                                    ShowSystemMenu="False" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentFloatingWindowControl}">
                    <Grid>
                        <Border x:Name="WindowBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="1">
                            <Grid Margin="3">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="18" />
                                    <RowDefinition Height="*" />
                                </Grid.RowDefinitions>
                                <Border x:Name="Header" Padding="2,0,2,0">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <ContentPresenter
                                            Content="{Binding Model.RootDocument,
                                                                            RelativeSource={RelativeSource TemplatedParent}}"
                                            ContentTemplate="{Binding Model.Root.Manager.DocumentTitleTemplate,
                                                                                    RelativeSource={RelativeSource TemplatedParent}}"
                                            ContentTemplateSelector="{Binding Model.Root.Manager.DocumentTitleTemplateSelector,
                                                                                            RelativeSource={RelativeSource TemplatedParent}}" />


                                        <avalonDockControls:DropDownButton x:Name="ContextMenuDropdownButton"
                                                                           Grid.Column="1"
                                                                           HorizontalAlignment="Center"
                                                                           VerticalAlignment="Center"
                                                                           HorizontalContentAlignment="Center"
                                                                           VerticalContentAlignment="Center"
                                                                           shell:WindowChrome.IsHitTestVisibleInChrome="True"
                                                                           DropDownContextMenu="{Binding Model.Root.Manager.DocumentContextMenu,
                                                                                                         RelativeSource={RelativeSource TemplatedParent}}"
                                                                           DropDownContextMenuDataContext="{Binding Path=RootDocumentLayoutItem,
                                                                                                                    RelativeSource={RelativeSource TemplatedParent}}"
                                                                           Focusable="False"
                                                                           Style="{StaticResource AvalonDock_Expression_ToolButtonStyle}"
                                                                           ToolTip="{x:Static avalonDockProperties:Resources.Document_CxMenu_Hint}">
                                            <Image x:Name="PART_ImgPinMenu"
                                                   Width="13"
                                                   Source="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinMenu.png"
                                                   Stretch="None" />
                                        </avalonDockControls:DropDownButton>

                                        <Button x:Name="PART_PinMaximize"
                                                Grid.Column="2"
                                                shell:WindowChrome.IsHitTestVisibleInChrome="True"
                                                Command="{x:Static shell:SystemCommands.MaximizeWindowCommand}"
                                                CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                                Focusable="False"
                                                Style="{StaticResource AvalonDock_Expression_ButtonStyle}"
                                                ToolTip="{x:Static avalonDockProperties:Resources.Window_Maximize}"
                                                Visibility="{Binding IsMaximized,
                                                                     RelativeSource={RelativeSource TemplatedParent},
                                                                     Converter={StaticResource InverseBoolToVisibilityConverter}}">
                                            <Image x:Name="PART_ImgPinMaximize"
                                                   Width="13"
                                                   Source="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinMaximize.png" />
                                        </Button>

                                        <Button x:Name="PART_PinRestore"
                                                Grid.Column="2"
                                                shell:WindowChrome.IsHitTestVisibleInChrome="True"
                                                Command="{x:Static shell:SystemCommands.RestoreWindowCommand}"
                                                CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                                Focusable="False"
                                                Style="{StaticResource AvalonDock_Expression_ButtonStyle}"
                                                ToolTip="{x:Static avalonDockProperties:Resources.Window_Restore}"
                                                Visibility="{Binding IsMaximized,
                                                                     RelativeSource={RelativeSource TemplatedParent},
                                                                     Converter={StaticResource BoolToVisibilityConverter}}">
                                            <Image x:Name="PART_ImgPinRestore"
                                                   Width="13"
                                                   Source="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinRestore.png" />
                                        </Button>

                                        <Button x:Name="PART_PinClose"
                                                Grid.Column="3"
                                                shell:WindowChrome.IsHitTestVisibleInChrome="True"
                                                Command="{Binding Path=RootDocumentLayoutItem.CloseCommand,
                                                                  RelativeSource={RelativeSource TemplatedParent}}"
                                                Focusable="False"
                                                Style="{StaticResource AvalonDock_Expression_ButtonStyle}"
                                                ToolTip="{x:Static avalonDockProperties:Resources.Document_Close}"
                                                Visibility="{Binding Path=IsEnabled,
                                                                     RelativeSource={RelativeSource Self},
                                                                     Mode=OneWay,
                                                                     Converter={StaticResource BoolToVisibilityConverter}}">
                                            <Image x:Name="PART_ImgPinClose"
                                                   Width="13"
                                                   Source="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinClose.png" />
                                        </Button>
                                    </Grid>
                                </Border>
                                <ContentPresenter Grid.Row="1" Content="{TemplateBinding Content}" />
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="WindowBorder" Property="Padding" Value="3" />
                        </Trigger>

                        <DataTrigger
                            Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.RootDocument.IsActive}"
                            Value="true">
                            <Setter Property="Background" Value="{DynamicResource AvalonDock_Expression_BaseColor10}" />
                        </DataTrigger>
                        <Trigger SourceName="ContextMenuDropdownButton" Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_ImgPinMenu" Property="Source"
                                    Value="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinMenu_Light.png" />
                        </Trigger>
                        <Trigger SourceName="ContextMenuDropdownButton" Property="IsChecked" Value="True">
                            <Setter TargetName="PART_ImgPinMenu" Property="Source"
                                    Value="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinMenu_Light.png" />
                        </Trigger>
                        <Trigger SourceName="PART_PinMaximize" Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_ImgPinMaximize" Property="Source"
                                    Value="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinMaximize_Light.png" />
                        </Trigger>
                        <Trigger SourceName="PART_PinRestore" Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_ImgPinRestore" Property="Source"
                                    Value="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinRestore_Light.png" />
                        </Trigger>
                        <Trigger SourceName="PART_PinClose" Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_ImgPinClose" Property="Source"
                                    Value="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinClose_Light.png" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type avalonDockControls:LayoutAnchorableFloatingWindowControl}"
           TargetType="{x:Type avalonDockControls:LayoutAnchorableFloatingWindowControl}">
        <Setter Property="Background" Value="{DynamicResource AvalonDock_Expression_BaseColor1}" />
        <Setter Property="shell:WindowChrome.WindowChrome">
            <Setter.Value>
                <shell:WindowChrome CaptionHeight="13"
                                    CornerRadius="0"
                                    GlassFrameThickness="0"
                                    ResizeBorderThickness="10" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableFloatingWindowControl}">
                    <Grid>
                        <Border x:Name="WindowBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{DynamicResource AvalonDock_Expression_BaseColor10}"
                                BorderThickness="2"
                                Padding="3">

                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="*" />
                                </Grid.RowDefinitions>
                                <Button x:Name="PART_PinMaximize"
                                        Grid.Column="2"
                                        HorizontalAlignment="Right"
                                        VerticalAlignment="Center"
                                        HorizontalContentAlignment="Center"
                                        VerticalContentAlignment="Center"
                                        Panel.ZIndex="100"
                                        shell:WindowChrome.IsHitTestVisibleInChrome="True"
                                        Command="{x:Static shell:SystemCommands.MaximizeWindowCommand}"
                                        CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                        Focusable="False"
                                        Style="{StaticResource AvalonDock_Expression_ButtonStyle}"
                                        ToolTip="{x:Static avalonDockProperties:Resources.Window_Maximize}"
                                        Visibility="{Binding IsMaximized,
                                                             RelativeSource={RelativeSource TemplatedParent},
                                                             Converter={StaticResource InverseBoolToVisibilityConverter}}">
                                    <Image x:Name="PART_ImgPinMaximize"
                                           Width="13"
                                           Source="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinMaximize.png" />
                                </Button>
                                <Button x:Name="PART_PinRestore"
                                        Grid.Column="2"
                                        HorizontalAlignment="Right"
                                        VerticalAlignment="Center"
                                        shell:WindowChrome.IsHitTestVisibleInChrome="True"
                                        Command="{x:Static shell:SystemCommands.RestoreWindowCommand}"
                                        CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                        Focusable="False"
                                        Style="{StaticResource AvalonDock_Expression_ButtonStyle}"
                                        ToolTip="{x:Static avalonDockProperties:Resources.Window_Restore}"
                                        Visibility="{Binding IsMaximized,
                                                             RelativeSource={RelativeSource TemplatedParent},
                                                             Converter={StaticResource BoolToVisibilityConverter}}">
                                    <Image x:Name="PART_ImgPinRestore"
                                           Width="13"
                                           Source="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinRestore.png" />
                                </Button>
                                <!--<Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="16"/>
                                </Grid.ColumnDefinitions>-->
                                <ContentPresenter Grid.Row="1"
                                                  Grid.ColumnSpan="4"
                                                  Content="{TemplateBinding Content}" />
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="WindowBorder" Property="Padding" Value="5" />
                        </Trigger>
                        <Trigger SourceName="PART_PinMaximize" Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_ImgPinMaximize" Property="Source"
                                    Value="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinMaximize_Light.png" />
                        </Trigger>
                        <Trigger SourceName="PART_PinRestore" Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_ImgPinRestore" Property="Source"
                                    Value="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinRestore_Light.png" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type avalonDockControls:LayoutAutoHideWindowControl}"
           TargetType="{x:Type avalonDockControls:LayoutAutoHideWindowControl}">
        <Setter Property="Background" Value="{DynamicResource AvalonDock_Expression_BaseColor5}" />
        <Setter Property="TextElement.Foreground" Value="{DynamicResource AvalonDock_Expression_BaseColor2}" />
        <Setter Property="AnchorableStyle">
            <Setter.Value>
                <Style TargetType="{x:Type avalonDockControls:LayoutAnchorableControl}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableControl}">
                                <Border x:Name="Bd"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="*" />
                                        </Grid.RowDefinitions>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*" />
                                                <ColumnDefinition Width="Auto" />
                                                <ColumnDefinition Width="Auto" />
                                                <ColumnDefinition Width="Auto" />
                                            </Grid.ColumnDefinitions>

                                            <Grid Margin="0,2,0,0" SnapsToDevicePixels="true">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*" />
                                                    <ColumnDefinition Width="22" />
                                                </Grid.ColumnDefinitions>
                                                <Border x:Name="intBd"
                                                        Background="{DynamicResource AvalonDock_Expression_BaseColor8}"
                                                        BorderBrush="{DynamicResource AvalonDock_Expression_BaseColor8}"
                                                        CornerRadius="3,0,0,0"
                                                        Padding="2">
                                                    <ContentPresenter
                                                        Content="{Binding Model,
                                                                                        RelativeSource={RelativeSource TemplatedParent}}"
                                                        ContentTemplate="{Binding AnchorableHeaderTemplate,
                                                                                                Mode=OneWay,
                                                                                                RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager},
                                                                                                                               Mode=FindAncestor}}"
                                                        ContentTemplateSelector="{Binding AnchorableHeaderTemplateSelector,
                                                                                                        Mode=OneWay,
                                                                                                        RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager},
                                                                                                                                       Mode=FindAncestor}}" />
                                                </Border>
                                                <avalonDockControls:DropDownControlArea
                                                    DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                                    DropDownContextMenuDataContext="{Binding Path=Model, RelativeSource={RelativeSource TemplatedParent}}" />
                                                <localControls:SplineBorder x:Name="intSplineBorder"
                                                                            Grid.Column="1"
                                                                            Fill="{DynamicResource AvalonDock_Expression_BaseColor8}"
                                                                            Stroke="{DynamicResource AvalonDock_Expression_BaseColor8}" />
                                            </Grid>

                                            <avalonDockControls:DropDownButton x:Name="MenuDropDownButton"
                                                                               Grid.Column="1"
                                                                               VerticalAlignment="Center"
                                                                               DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu,
                                                                                                             RelativeSource={RelativeSource TemplatedParent}}"
                                                                               DropDownContextMenuDataContext="{Binding Path=LayoutItem,
                                                                                                                        RelativeSource={RelativeSource TemplatedParent}}"
                                                                               Focusable="False"
                                                                               Style="{StaticResource AvalonDock_Expression_ToolButtonStyle}"
                                                                               ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_CxMenu_Hint}">
                                                <Image x:Name="PART_ImgMenuPin"
                                                       Source="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinMenu.png" />
                                            </avalonDockControls:DropDownButton>

                                            <Button x:Name="PART_AutoHidePin"
                                                    Grid.Column="2"
                                                    HorizontalAlignment="Center"
                                                    VerticalAlignment="Center"
                                                    Command="{Binding Path=LayoutItem.AutoHideCommand,
                                                                      RelativeSource={RelativeSource TemplatedParent}}"
                                                    Focusable="False"
                                                    Style="{StaticResource AvalonDock_Expression_ButtonStyle}"
                                                    ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnAutoHide_Hint}"
                                                    Visibility="{Binding Path=IsEnabled,
                                                                         RelativeSource={RelativeSource Self},
                                                                         Mode=OneWay,
                                                                         Converter={StaticResource BoolToVisibilityConverter},
                                                                         ConverterParameter=Visibility.Hidden}">
                                                <Image x:Name="PART_ImgAutoHidePin"
                                                       Source="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinAutoHide.png" />
                                                <Button.LayoutTransform>
                                                    <RotateTransform Angle="90" />
                                                </Button.LayoutTransform>
                                            </Button>

                                            <Button x:Name="PART_HidePin"
                                                    Grid.Column="3"
                                                    HorizontalAlignment="Center"
                                                    VerticalAlignment="Center"
                                                    Command="{Binding Path=LayoutItem.HideCommand,
                                                                      RelativeSource={RelativeSource TemplatedParent}}"
                                                    Focusable="False"
                                                    Style="{StaticResource AvalonDock_Expression_ButtonStyle}"
                                                    ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnClose_Hint}"
                                                    Visibility="{Binding Path=IsEnabled,
                                                                         RelativeSource={RelativeSource Self},
                                                                         Mode=OneWay,
                                                                         Converter={StaticResource BoolToVisibilityConverter}}">
                                                <Image x:Name="PART_ImgHidePin"
                                                       Source="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinClose.png" />
                                            </Button>
                                        </Grid>
                                        <ContentPresenter Grid.Row="1"
                                                          Content="{Binding LayoutItem.View,
                                                                            RelativeSource={RelativeSource TemplatedParent}}"
                                                          FlowDirection="{TemplateBinding FlowDirection}" />


                                        <!--<ContentPresenter
                                            Content="{Binding Model.Content, RelativeSource={RelativeSource TemplatedParent}}"
                                            ContentTemplate="{Binding LayoutItemTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                            ContentTemplateSelector="{Binding LayoutItemTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                            Grid.Row="1"/>-->

                                    </Grid>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger SourceName="MenuDropDownButton" Property="IsMouseOver" Value="True">
                                        <Setter TargetName="PART_ImgMenuPin" Property="Source"
                                                Value="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinMenu_Light.png" />
                                    </Trigger>
                                    <Trigger SourceName="MenuDropDownButton" Property="IsChecked" Value="True">
                                        <Setter TargetName="PART_ImgMenuPin" Property="Source"
                                                Value="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinMenu_Light.png" />
                                    </Trigger>
                                    <Trigger SourceName="PART_AutoHidePin" Property="IsMouseOver" Value="True">
                                        <Setter TargetName="PART_ImgAutoHidePin" Property="Source"
                                                Value="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinAutoHide_Light.png" />
                                    </Trigger>
                                    <Trigger SourceName="PART_HidePin" Property="IsMouseOver" Value="True">
                                        <Setter TargetName="PART_ImgHidePin" Property="Source"
                                                Value="/CodeMask.WPF.AvalonDock.Themes.Expression;component/Images/PinClose_Light.png" />
                                    </Trigger>

                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Foreground"
                                                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                    </Trigger>

                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="AvalonDock_Expression_NavigatorWindowListBoxItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle RadiusX="2"
                               RadiusY="2"
                               Stroke="#8E6EA6F5"
                               StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="AvalonDock_Expression_NavigatorWindowListBoxItemStyle" TargetType="ListBoxItem">
        <Setter Property="FocusVisualStyle"
                Value="{StaticResource AvalonDock_Expression_NavigatorWindowListBoxItemFocusVisual}" />
        <Setter Property="Foreground" Value="{DynamicResource AvalonDock_Expression_BaseColor2}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="5,0,5,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="0"
                            SnapsToDevicePixels="true">
                        <Border x:Name="InnerBorder"
                                BorderThickness="0"
                                CornerRadius="1">
                            <ContentPresenter Grid.RowSpan="2"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background"
                                    Value="{DynamicResource AvalonDock_Expression_NavigatorWindowListBoxItemHoverFill}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background"
                                    Value="{DynamicResource AvalonDock_Expression_NavigatorWindowListBoxItemSelectedFill}" />
                            <Setter Property="Foreground" Value="{DynamicResource AvalonDock_Expression_BaseColor3}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type avalonDockControls:NavigatorWindow}" TargetType="{x:Type avalonDockControls:NavigatorWindow}">
        <Setter Property="Background" Value="{DynamicResource AvalonDock_Expression_BaseColor13}" />
        <Setter Property="Foreground" Value="{DynamicResource AvalonDock_Expression_BaseColor2}" />
        <Setter Property="SizeToContent" Value="WidthAndHeight" />
        <Setter Property="ResizeMode" Value="NoResize" />
        <Setter Property="shell:WindowChrome.WindowChrome">
            <Setter.Value>
                <shell:WindowChrome CaptionHeight="16"
                                    CornerRadius="0"
                                    GlassFrameThickness="4"
                                    ResizeBorderThickness="10" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:NavigatorWindow}">
                    <Grid>
                        <Border x:Name="WindowBorder"
                                Background="{DynamicResource AvalonDock_Expression_BaseColor13}"
                                BorderBrush="{DynamicResource AvalonDock_Expression_BaseColor10}"
                                BorderThickness="1"
                                CornerRadius="0">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="54" />
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>

                                <Grid Margin="5">
                                    <Grid.RowDefinitions>
                                        <RowDefinition />
                                        <RowDefinition />
                                    </Grid.RowDefinitions>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition />
                                        </Grid.ColumnDefinitions>
                                        <Image
                                            Source="{Binding SelectedDocument.LayoutElement.IconSource,
                                                                Converter={StaticResource NullToDoNothingConverter}}"
                                            Stretch="None"
                                            Visibility="{Binding SelectedDocument.LayoutElement.IconSource,
                                                                    Converter={StaticResource BoolToVisibilityConverter}}" />
                                        <TextBlock Grid.Column="1"
                                                   Margin="4,0,0,0"
                                                   VerticalAlignment="Center"
                                                   FontWeight="Bold"
                                                   Text="{Binding SelectedDocument.LayoutElement.Title}"
                                                   TextTrimming="CharacterEllipsis" />
                                    </Grid>
                                    <TextBlock VerticalAlignment="Center"
                                               Text="{Binding SelectedDocument.LayoutElement.Description}"
                                               TextTrimming="CharacterEllipsis" />
                                </Grid>

                                <Border Grid.Row="1"
                                        MinHeight="200"
                                        Background="{DynamicResource AvalonDock_Expression_BaseColor4}"
                                        BorderBrush="{DynamicResource AvalonDock_Expression_BaseColor4}"
                                        BorderThickness="1">
                                    <Grid Margin="5">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition />
                                        </Grid.ColumnDefinitions>
                                        <Grid Margin="5">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition />
                                            </Grid.RowDefinitions>
                                            <TextBlock Margin="0,3,0,4"
                                                       FontWeight="Bold"
                                                       Text="Active Tool Windows" />
                                            <ListBox Grid.Row="1"
                                                     MaxHeight="400"
                                                     Background="Transparent"
                                                     BorderThickness="0"
                                                     ItemContainerStyle="{StaticResource AvalonDock_Expression_NavigatorWindowListBoxItemStyle}"
                                                     ItemsSource="{Binding Anchorables}"
                                                     SelectedItem="{Binding SelectedAnchorable,
                                                                            Mode=TwoWay}">
                                                <ListBox.ItemTemplate>
                                                    <DataTemplate>
                                                        <Grid Margin="0,2,0,2">
                                                            <Grid.ColumnDefinitions>
                                                                <ColumnDefinition Width="16" />
                                                                <ColumnDefinition Width="150" />
                                                            </Grid.ColumnDefinitions>
                                                            <Image
                                                                Source="{Binding LayoutElement.IconSource, Converter={StaticResource NullToDoNothingConverter}}"
                                                                Stretch="None" />
                                                            <TextBlock Grid.Column="1"
                                                                       Margin="4,0,0,0"
                                                                       Text="{Binding LayoutElement.Title}"
                                                                       TextTrimming="CharacterEllipsis" />
                                                        </Grid>
                                                    </DataTemplate>
                                                </ListBox.ItemTemplate>
                                            </ListBox>
                                        </Grid>
                                        <Grid Grid.Column="1" Margin="5">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition />
                                            </Grid.RowDefinitions>
                                            <TextBlock Margin="0,3,0,4"
                                                       FontWeight="Bold"
                                                       Text="Active Files" />
                                            <ListBox Grid.Row="1"
                                                     MaxHeight="400"
                                                     Background="Transparent"
                                                     BorderThickness="0"
                                                     ItemContainerStyle="{StaticResource AvalonDock_Expression_NavigatorWindowListBoxItemStyle}"
                                                     ItemsSource="{Binding Documents}"
                                                     SelectedItem="{Binding SelectedDocument,
                                                                            Mode=TwoWay}">
                                                <ListBox.ItemTemplate>
                                                    <DataTemplate>
                                                        <Grid Margin="0,2,0,2">
                                                            <Grid.ColumnDefinitions>
                                                                <ColumnDefinition Width="16" />
                                                                <ColumnDefinition Width="150" />
                                                            </Grid.ColumnDefinitions>
                                                            <Image
                                                                Source="{Binding LayoutElement.IconSource, Converter={StaticResource NullToDoNothingConverter}}"
                                                                Stretch="None" />
                                                            <TextBlock Grid.Column="1"
                                                                       Margin="4,0,0,0"
                                                                       Text="{Binding LayoutElement.Title}"
                                                                       TextTrimming="CharacterEllipsis" />
                                                        </Grid>
                                                    </DataTemplate>
                                                </ListBox.ItemTemplate>
                                                <ListBox.ItemsPanel>
                                                    <ItemsPanelTemplate>
                                                        <WrapPanel Orientation="Vertical" />
                                                    </ItemsPanelTemplate>
                                                </ListBox.ItemsPanel>
                                            </ListBox>
                                        </Grid>
                                    </Grid>
                                </Border>

                                <Grid Grid.Row="2" Margin="5">
                                    <TextBlock VerticalAlignment="Center"
                                               Text="{Binding SelectedDocument.LayoutElement.ToolTip}" />
                                </Grid>
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>


</ResourceDictionary>